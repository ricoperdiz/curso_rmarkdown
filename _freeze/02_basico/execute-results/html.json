{
  "hash": "2427298850bb4c759024955e0312b306",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Conceitos básicos\"\nformat: html\naliases: \n  - /basico/\n---\n\n\n## O que é Markdown?\n\n<!-- Extraido de <https://rpubs.com/Henriqueufla/markdown> -->\nMarkdown é uma linguagem de marcação projetada para formatar textos de forma simples e legível, ou seja, não é uma linguagem de programação.\nA linguagem Markdown [foi criada por John Gruber em 2004](https://pt.wikipedia.org/wiki/Markdown) com a colaboração de Aaron Swartz.\nO objetivo do Markdown é permitir que escritores criem conteúdo rico em formatação, sem precisar usar mais complexas, como encontradas na [linguagem HTML](https://pt.wikipedia.org/wiki/HTML), por exemplo.  \n\n## O que é Rmarkdown?\n\nEsse tipo de documento foi introduzido inicialmente no pacote `knitr` [@knitr2014;@knitr2015;@R-knitr] no ano de 2012.\nA idéia era superar as limitações do [Sweave](https://en.wikipedia.org/wiki/Sweave), uma ferramenta que permite a integração de código R com documentos LaTeX.\nEm seu desenho, o Rmarkdown (apesar de possuir o **R** no nome) foi pensado em ser livre para mesclar qualquer linguagem de programação com texto, isto é, uma implementação moderna e prática da filosofia de programação letrada (em inglês, [literate programming](https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_letrada)).\nA programação letrada foi introduzida por Donald Knuth em 1984 e consite em combinar código e documentação em um único documento para criar relatórios que são compreensíveis tanto para humanos quanto para máquinas.\nTrata-se de escrever programas que são explicados em linguagem natural, acompanhados pelo código-fonte.\nA idéia é que a lógica e a intenção por trás do código sejam claramente comunicadas.  \n\n<!-- ## Para que serve o RMarkdown? -->\n\n<!-- O RMarkdown é utilizado para uma variedade de finalidades, incluindo: -->\n\n<!-- - **Relatórios Reprodutíveis**: Permite a criação de relatórios que podem ser facilmente reproduzidos, facilitando a transparência e a replicabilidade das análises. -->\n<!-- - **Documentação de Análises de Dados**: Facilita a documentação de análises de dados, incluindo a explicação do raciocínio por trás das decisões analíticas. -->\n<!-- - **Apresentações Dinâmicas**: Permite a criação de apresentações dinâmicas que incorporam análises de dados em tempo real. -->\n<!-- - **Geração de Documentos Variados**: Pode ser usado para criar uma variedade de documentos, incluindo relatórios PDF, páginas da web, apresentações de slides e até mesmo livros eletrônicos.   -->\n\n<!-- R Markdown provides an authoring framework for data science. You can use a single R Markdown file to both -->\n<!--     save and execute code, and -->\n<!--     generate high quality reports that can be shared with an audience. -->\n<!-- R Markdown was designed for easier reproducibility, since both the computing code and narratives are in the same document, and results are automatically generated from the source code. R Markdown supports dozens of static and dynamic/interactive output formats. -->\n<!-- RMarkdown é a possibilidade de executar-se scripts em R (além de outras linguagens) e incorporá-los a um arquivo Markdown (extensão .md). O pacote knitr executará “pedaços” (chunk) de códigos e gerará um arquivo .md com os códigos e seus resultados. -->\n<!-- Na sequência, o pandoc, que é um conversor, converte-o para a linguagem desejada, gerando os arquivos nos formatos escolhidos (.html, .docx, .pdf, .odt) (http://rmarkdown.rstudio.com). A Figura 1 ilustra o processo: -->\n\n<!-- RMarkdown é um tipo de arquivo que combina texto formatado com código R para criar documentos dinâmicos e interativos. Ele permite a integração perfeita de narrativa, código e resultados em um único documento. -->\n\n::: {.callout-tip}\nArquivos Markdown apresentam extensão `.md`.\nArquivos Rmarkdown apresentam extensão `.Rmd`.\nCaso você use SO Windows e não consiga ver a extensão de cada arquivo, isto é, o formato do arquivo, sugiro que [siga este tutorial](https://support.microsoft.com/pt-br/windows/extens%C3%B5es-de-nome-de-arquivo-comuns-no-windows-da4a4430-8e76-89c5-59f7-1cdbbc75cb01) para habilitar esta função em seu computador.\nIsso ajuda no entendimento dos diferentes tipos de arquivos que lidaremos nesse curso.\n:::\n\n<!-- ## Benefícios de se utilizar o Rmarkdown -->\n\n<!-- Os benefícios de uso do Rmarkdown podem ser sintetizados nos seguintes pontos: reprodutibilidade, integração de código e texto, flexibilidade de formatos, suporte a múltiplas linguagens de programação, colaboração e controle de versão, visualizações interativas, facilidade de uso, elevado caráter de personalização e existência de pacotes para ampliar os usos. -->\n<!-- De todos esses pontos, destaco abaixo os que considero mais importantes: -->\n\n<!--   + Reprodutibilidade. R Markdown facilita a criação de documentos reprodutíveis, onde o código é executado toda vez que o documento é gerado. Isso assegura que os resultados apresentados estejam sempre atualizados e sejam derivados diretamente do código fornecido, permitindo que outros possam reproduzir exatamente as mesmas análises. -->\n\n<!--   + Integração de código e texto. XXX -->\n<!--   + Visualizações interativas.    -->\n\n## Exemplos de produtos gerados com Rmarkdown\n\nHá uma infinidade de exemplos de produtos que foram gerados utilizando o Rmarkdown.\nListo abaixo alguns exemplos, colocando tanto o produto quanto o código fonte.  \n\n  + [Sítio digital e pacote - R Markdown](https://rmarkdown.rstudio.com/) | [Código fonte](https://github.com/rstudio/rmarkdown)\n\n  + [Livro - Efficient R programming](https://bookdown.org/csgillespie/efficientR/)  | [Código fonte](https://github.com/csgillespie/efficientR/)\n  \n  + [Livro - bookdown: Authoring Books and Technical Documents with R Markdown](https://bookdown.org/yihui/bookdown/) | [Código fonte](https://github.com/rstudio/bookdown)\n  \n  + [Apresentação - Xaringan](https://slides.yihui.org/xaringan/) | [Código fonte](https://github.com/yihui/xaringan)\n\n## Como criar um arquivo `.Rmd`\n\nXXXX\n\n## Estrutura de um documento Rmarkdown\n\nUm arquivo RMarkdown é composto por três tipos principais de elementos:\n\n1. **Metadados YAML**: Também conhecido como cabeçalho YAML, este é um bloco de metadados no início do arquivo que fornece informações sobre o documento, como título, autor e formato de saída desejado.\n\n2. **Chunk de Código**: São blocos de código R delimitados por três crases (`````). Esses blocos de código podem ser executados e os resultados são incorporados ao documento final.\n\n3. **Texto Formatado**: Texto normal que pode incluir formatação com Markdown para criar títulos, listas, links, entre outros.\n\n  ````\n  ---\n  title: \"Meu primeiro documento em Rmarkdown\"\n  author: \"Coloco meu nome aqui, entre aspas\"\n  date: \"15 Maio 2024\"\n  ---\n  \n  ## Análise exploratória de dados\n\n  Vou analisar o conjunto de dados chamado `iris`.  \n\n  ```{{r}}\n  iris\n  ```\n  \n  Aqui escrevo mais texto sobre meu conjunto de dados.\n  \n  ### Gráficos\n  \n  ```{{r}}\n  gplot(iris$Sepal.Length, iris$Sepal.Width)\n  ```\n  \n  ````\n\n### YAML\n\n\n\n\n```{.default}\n---\ntitle: \"Meu primeiro documento em Rmarkdown\"\nauthor: \"Coloco meu nome aqui, entre aspas\"\ndate: \"15 Maio 2024\"\n---\n```\n\n\nYAML[^yaml] se refere ao conjunto de metadados que identifica o documento, e é o responsável pelas configurações do documento.\nNesta parte, informamos o título do documento, a data de criação, o nome do autor e o tipo de produto que desejamos.\nNo exemplo acima, definimos o produto como `html_document`.\nCaso quiséssemos um arquivo no formato `.docx` (ou Word), o output deveria ser modificado para `word_document`.\nCada formato possui um conjunto de opções disponíveis.\nNesse caso, é importante consultar a página de cada formato disponível na documentação do RMarkdown.  \n\n\n[^yaml]: YAML vem do inglês **Y**AML **A**in’t **M**arkup **L**anguage, que significa *YAML não é uma linguagem de marcação*.  \n\n\n### Pedaços de código\n\nOs pedaços de código em R  (*code chunks*) podem ser executados para gerar resultados que serão incorporados ao documento.\nVocê pode inserir um pedaço de código manualmente manualmente ou com o atalho `CTRL + ALT + I` no Windows/Linux e `CMD + ALT + I` no MacOS.\nÉ possível incluir uma série de opções relacionadas à execução do código.\nFalaremos destas opções mais adiante.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exemplo de um chunk de código R\nsummary(mtcars)\n```\n:::\n\n\n### Texto\n\n#### Citações de referências bibliográficas\n\n\n\n\n\n<!-- Isso conclui nosso capítulo introdutório sobre o RMarkdown. -->\n<!-- Nos próximos capítulos, vamos explorar a sintaxe de Markdown e tipos diferentes de produtos com Rmarkdown.   -->\n<!-- tópicos mais avançados, incluindo personalização de saída, integração com pacotes externos e dicas de boas práticas.   -->\n<!-- Por exemplo, um mesmo código Markdown pode ser convertido para HTML, LaTeX (gera pdf’s), docx etc. -->\n<!-- Para isso, é necessário um conversor, que lê um código em Markdown e, considerando a escolha do output desejado, converte o arquivo para a linguagem desejada. Isto ficará mais claro com os exemplos. -->",
    "supporting": [
      "02_basico_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "162a0f7afdb5f64d62bd6f29d11a00ee",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Conceitos básicos\"\nformat: html\naliases: \n  - /basico/\n---\n\n\n\n\n### Objetivos de aprendizado\n\n+ Conhecer o que é Rmd e como ele se diferencia do Markdown simples;\n+ Entender as vantagens de usar Rmd para relatórios reprodutíveis e documentos dinâmicos;\n+ Identificar e compreender a estrutura básica de um arquivo Rmd, incluindo o cabeçalho YAML, os pedaços de código, e o corpo do documento;\n+ Saber como configurar o cabeçalho YAML para definir parâmetros como título, autor, data e formato de saída (HTML, PDF, Word, etc.);\n+ Aprender a inserir e configurar pedaços de código dentro do documento Rmd;\n+ Entender como executar código dentro de um documento Rmd e como controlar a saída desses códigos (exibição de código, resultados, gráficos, etc.).  \n\n## O que é Markdown?\n\n<!-- Extraido de <https://rpubs.com/Henriqueufla/markdown> -->\nMarkdown é uma linguagem de marcação projetada para ser simples e fácil de ler e escrever em texto puro.\nUma linguagem de marcação __não é__ uma linguagem de programação.\nA linguagem Markdown [foi criada por John Gruber em 2004](https://pt.wikipedia.org/wiki/Markdown) com a colaboração de Aaron Swartz.\nO objetivo do Markdown é permitir que escritores criem conteúdo rico em formatação, sem precisar usar linguagens mais complexas, como encontradas na [linguagem HTML](https://pt.wikipedia.org/wiki/HTML), por exemplo.  \n\n## O que é Rmarkdown?\n\nEsse tipo de documento foi introduzido inicialmente no pacote `knitr` [@knitr2014;@knitr2015;@R-knitr] no ano de 2012.\nA idéia era superar as limitações do [Sweave](https://en.wikipedia.org/wiki/Sweave), uma ferramenta que permite a integração de código R com documentos LaTeX.\nEm seu desenho, o Rmd (apesar de possuir o **R** no nome) foi pensado em ser livre para mesclar qualquer linguagem de programação com texto, isto é, uma implementação moderna e prática da filosofia de programação letrada (em inglês, [literate programming](https://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_letrada)).\nA programação letrada foi introduzida por Donald Knuth em 1984 e consite em combinar código e documentação em um único documento para criar relatórios que são compreensíveis tanto para humanos quanto para máquinas.\nTrata-se de escrever programas que são explicados em linguagem natural, acompanhados pelo código-fonte.\nA idéia é que a lógica e a intenção por trás do código sejam claramente comunicadas.  \n\n<!-- R Markdown was designed for easier reproducibility, since both the computing code and narratives are in the same document, and results are automatically generated from the source code. R Markdown supports dozens of static and dynamic/interactive output formats. -->\n\n## Para que serve o Rmd?\n\nO Rmd é utilizado para uma variedade de finalidades, incluindo:\n\n+ produção de **relatórios reprodutíveis**, que podem ser facilmente reproduzidos, facilitando a transparência e a replicabilidade das análises;\n+ **documentação de análises de dados**, incluindo a explicação do raciocínio por trás das decisões analíticas;\n+ **apresentações dinâmicas**, em que se mesclam texto, imagens, e código, permitindo a criação de apresentações dinâmicas que incorporam análises de dados em tempo real;\n+ **geração de documentos variados**, que abrangem *PDFs*, páginas da internet em formato HTML, apresentações de slides e até mesmo livros eletrônicos.   -->\n\n<!-- R Markdown provides an authoring framework for data science. You can use a single R Markdown file to both -->\n<!--     save and execute code, and -->\n<!--     generate high quality reports that can be shared with an audience. -->\n\n<!-- RMarkdown é a possibilidade de executar-se scripts em R (além de outras linguagens) e incorporá-los a um arquivo Markdown (extensão .md). O pacote knitr executará “pedaços” (chunk) de códigos e gerará um arquivo .md com os códigos e seus resultados. -->\n<!-- Na sequência, o pandoc, que é um conversor, converte-o para a linguagem desejada, gerando os arquivos nos formatos escolhidos (.html, .docx, .pdf, .odt) (http://rmarkdown.rstudio.com). A Figura 1 ilustra o processo: -->\n\n<!-- RMarkdown é um tipo de arquivo que combina texto formatado com código R para criar documentos dinâmicos e interativos. Ele permite a integração perfeita de narrativa, código e resultados em um único documento. -->\n\n::: {.callout-tip}\nArquivos Markdown apresentam extensão `.md`.\nArquivos Rmarkdown apresentam extensão `.Rmd`.\nCaso você use SO Windows e não consiga ver a extensão de cada arquivo, isto é, o formato do arquivo, sugiro que [siga este tutorial](https://support.microsoft.com/pt-br/windows/extens%C3%B5es-de-nome-de-arquivo-comuns-no-windows-da4a4430-8e76-89c5-59f7-1cdbbc75cb01) para habilitar esta função em seu computador.\nIsso ajuda no entendimento dos diferentes tipos de arquivos que lidaremos nesse curso.\n:::\n\n<!-- ## Benefícios de se utilizar o Rmarkdown -->\n\n<!-- Os benefícios de uso do Rmarkdown podem ser sintetizados nos seguintes pontos: reprodutibilidade, integração de código e texto, flexibilidade de formatos, suporte a múltiplas linguagens de programação, colaboração e controle de versão, visualizações interativas, facilidade de uso, elevado caráter de personalização e existência de pacotes para ampliar os usos. -->\n<!-- De todos esses pontos, destaco abaixo os que considero mais importantes: -->\n\n<!--   + Reprodutibilidade. R Markdown facilita a criação de documentos reprodutíveis, onde o código é executado toda vez que o documento é gerado. Isso assegura que os resultados apresentados estejam sempre atualizados e sejam derivados diretamente do código fornecido, permitindo que outros possam reproduzir exatamente as mesmas análises. -->\n\n<!--   + Integração de código e texto. XXX -->\n<!--   + Visualizações interativas.    -->\n\n## Exemplos de produtos gerados com Rmarkdown\n\nHá uma infinidade de exemplos de produtos que foram gerados utilizando o Rmarkdown.\nListo abaixo alguns exemplos, colocando tanto o produto quanto o código fonte.  \n\n+ [Sítio digital e pacote - R Markdown](https://rmarkdown.rstudio.com/) | [Código fonte](https://github.com/rstudio/rmarkdown)\n\n+ [Página digital do projeto PELD FORR](https://peldforr.org/)\n\n+ [Livro - Efficient R programming](https://bookdown.org/csgillespie/efficientR/)  | [Código fonte](https://github.com/csgillespie/efficientR/)\n  \n+ [Livro - bookdown: Authoring Books and Technical Documents with R Markdown](https://bookdown.org/yihui/bookdown/) | [Código fonte](https://github.com/rstudio/bookdown)\n  \n+ [Apresentação - Xaringan](https://slides.yihui.org/xaringan/) | [Código fonte](https://github.com/yihui/xaringan)\n\n\n## Dica de organização - criar projeto no RStudio\n\nAntes de começar a brincar com os arquivos Rmd e testar as possibilidades, eu sugiro **fortemente** que vocês criem um projeto no RStudio.  \n\nCriar um projeto no RStudio é escolher uma pasta para depositar todos seus arquivos ali e facilitar a busca desses arquivos, tanto por você, usuário, quanto pelo R, que será utilizado pelo RStudio para compilar os arquivos Rmd nos diferentes produtos que você desejar.  \n\nPortanto, siga os passos abaixo para criar um projeto no RStudio:\n\n1) Abra o RStudio.  \n\n2) Clique em `File -> New Project...` (@fig-rstudionewproject)\n\n![Tela exibe a opção de criar um novo projeto na aba `File` do RStudio.](figuras/rstudio_newproject.png){#fig-rstudionewproject}\n\n3) Selecione a opção *New Directory* para criar uma nova pasta para conter seu projeto (@fig-rstudionewdir).  \n\n![](figuras/rstudio_newproject_wizard.png){#fig-rstudionewdir}\n\n4) Em seguida, escolha a opção *New Project* (@fig-rstudionewproject).  \n\n![](figuras/rstudio_newproject_options.png){#fig-rstudionewproject}\n\n5) Por fim, coloque o nome da sua nova pasta contendo o projeto RStudio dentro da opção *Directory Name*.\nE na opção inferior, nomeada *Create project as subdirectory of:*, escolha por meio do botão *Browser* a pasta mãe que abrigará a pasta contendo seu projeto (@fig-rstudiofoldersubfolder).  \n\n![](figuras/rstudio_newproject_folder.png){#fig-rstudiofoldersubfolder}\n\nAo finalizar essas etapas, o RStudio criará um arquivo de sufixo `.Rproj` dentro da pasta que você criou.\nAo clicar duas vezes nesse arquivo, o RStudio se abrirá, tendo essa pasta como a de trabalho (veja aqui [o que é uma pasta de trabalho no R](https://intror.netlify.app/%C3%A1rea-de-trabalho-vs.-pasta-de-trabalho.html)) na sua sessão.  \n\nPara finalizar, disponibilizo o vídeo abaixo, feito pelo perfil do YouTube [Epidemio Fora da Curva](https://www.youtube.com/@epidemioforadacurva3046), para facilitar o entendimento de vocês:\n\n\n\n\n{{< video https://www.youtube.com/watch?v=ts4jLbY6zUc >}}\n\n\n\n\n\n\n## Como criar um arquivo `.Rmd` {#criar-rmd}\n\nA primeira maneira de criar um arquivo Rmarkdown é apertar o botão de criar arquivos presente no lado superior esquerdo do RStudio (@fig-criarmd1).\nAo clicar neste botão, opções de arquivos são listadas, entre as quais se inclui o Rmarkdown.\n\n\n![Botão, presente na interface do RStudio, utilizado para criar arquivos, destacado com um retângulo verde.](figuras/cria_rmd.png){#fig-criarmd1}\n\nAo selecionar a opção \"Rmarkdown\", uma tela se abre demandando que se coloque o título do arquivo, autor, e data. Também se solicita o tipo de arquivo final desejado: HTML, PDF, ou Word (@fig-novormd).  \n\n![Tela que se abre ao criarmos um novo arquivo Rmarkdown.](figuras/novo_rmd.png){#fig-novormd}\n\nUma outra maneira de criar um arquivo Rmarkdown é pelo menu de entrada.\nSelecionam-se as opções `File -> New File -> Rmarkdown ...` (@fig-criarmd2) para iniciar um novo arquivo e a tela apresentada na @fig-novormd aparecer novamente.  \n\n![Criação de arquivo Rmarkdown usando as opções presentes no menu do RStudio (`File -> New File -> Rmarkdown ...`).](figuras/cria_rmd2.png){#fig-criarmd2}\n\n\n## Estrutura de um documento Rmd\n\nUm arquivo Rmd é composto por três tipos principais de elementos:\n\n1. **Metadados**: também conhecido como cabeçalho YAML, este é um bloco de metadados no início do arquivo que fornece informações sobre o documento, como título, autor e formato de saída desejado.  \n\n2. **Texto formatado**: texto normal que pode incluir formatação com Markdown para criar títulos, listas, links, entre outros.  \n\n3. **Pedaço de código**: são blocos de código delimitados por três crases (```). Esses blocos de código podem ser executados e os resultados são incorporados ao documento final.  \n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n````{.sourceCode .r}\n---\ntitle: \"Análise exploratória de dados - iris\"\nauthor: \"Euzinho Euzo Euzão\"\ndate: \"15 Maio 2024\"\n---\n\n## Análise exploratória de dados\n\nVou analisar o conjunto de dados chamado `iris`.\n\n```{r}\niris\n```\n\nAqui escrevo mais texto sobre meu conjunto de dados.\n\n### Gráficos\n\n```{r}\nlibrary(\"ggplot2\")\ngplot(iris$Sepal.Length, iris$Sepal.Width)\n```\n````\n\n\n:::\n:::\n\n\n\n\n### YAML\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```{.sourceCode .r}\n---\ntitle: \"Análise exploratória de dados - iris\"\nauthor: \"Euzinho Euzo Euzão\"\ndate: \"15 Maio 2024\"\n---\n```\n\n\n:::\n:::\n\n\n\n\nYAML[^yaml] se refere ao conjunto de metadados que identifica o documento, e é o responsável pelas configurações do documento.\nNesta parte, informamos o título do documento, a data de criação, o nome do autor e o tipo de produto que desejamos.\nNo exemplo acima, definimos o produto como `html_document`.\nCaso quiséssemos um arquivo no formato `.docx` (ou Word), o output deveria ser modificado para `word_document`.\nCada formato possui um conjunto de opções disponíveis.\nNesse caso, é importante consultar a página de cada formato disponível na documentação do Rmd.  \n\n\n[^yaml]: YAML vem do inglês **Y**AML **A**in’t **M**arkup **L**anguage, que significa *YAML não é uma linguagem de marcação*.  \n\n### Texto\n\nNo corpo do texto, você pode escrever normalmente, utilizando a sintaxe de Markdown para incluir elementos em itálico, negrito, incluir imagens, tabelas etc.\nVeja o aprofundamento deste tema no **[capítulo \"Sintaxe\"](03_sintaxe.qmd)**.  \n\nPor exemplo, veja o texto escrito em Markdown abaixo:\n\n```\n## Cabeçalho de nível 2\n\nEi, gente, __olhem__ aqui. Isso é um texto em Markdown.  \n\nTemos *itálico*, __negrito__, listas como a presente abaixo:\n  \n  + item 1\n  + item 2\n\n```\n\nSe compilamos um arquivo Markdown contendo este texto, o produto final terá uma imagem como a evidenciada abaixo:\n\n![Texto em Markdown compilado para um arquivo HTML. A aparência pode ser alterada, porém reparem em como o código exibido acima se transforma no texto exibido nesta imagem.](figuras/exemplo_md.png)\n\n### Pedaços de código\n\nOs pedaços de código em R  (*code chunks*) podem ser executados para gerar resultados que serão incorporados ao documento.\nVocê pode inserir um pedaço de código manualmente manualmente ou com o atalho `CTRL + ALT + I` no Windows/Linux e `CMD + ALT + I` no MacOS.\nÉ possível incluir uma série de opções relacionadas à execução do código.\nFalaremos destas opções mais adiante.  \n\n\n```{{r}}\nlibrary(\"ggplot2\")\ngplot(iris$Sepal.Length, iris$Sepal.Width)\n```\n\nIsso conclui nosso capítulo introdutório sobre arquivos Rmd.\nNos próximos capítulos, vamos explorar a sintaxe utilizada em arquivos Rmd e tipos diferentes de produtos com o Rmd.  \n\n<!-- tópicos mais avançados, incluindo personalização de saída, integração com pacotes externos e dicas de boas práticas.   -->\n<!-- Por exemplo, um mesmo código Markdown pode ser convertido para HTML, LaTeX (gera pdf’s), docx etc. -->\n<!-- Para isso, é necessário um conversor, que lê um código em Markdown e, considerando a escolha do output desejado, converte o arquivo para a linguagem desejada. Isto ficará mais claro com os exemplos. -->",
    "supporting": [
      "02_basico_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "8292f46743c95fc10abb27af354982dd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tipos de produtos (='Output')\"\nformat: html\naliases: \n  - /output/\n---\n\n\n\n\nPodemos produzir diferentes tipos de produtos utilizando arquivos Rmd: documentos, apresentações, sítios web, e painéis de gestão (conhecidos como *dashboard* na língua inglesa).\nDiscorrerei sobre cada um deles, nas próximas seções.  \n\n\n## Objetivos de aprendizado\n\n+ Compilar um arquivo Rmd em HTML;\n+ Compilar um arquivo Rmd em PDF;\n+ Compilar um arquivo Rmd em DOCX;\n\n<!-- 6. **Aplicação Prática:** -->\n<!--    - Realizar exercícios práticos para criar documentos Rmd simples que integrem texto formatado com resultados de código R. -->\n<!--    - Praticar a incorporação de gráficos, tabelas e outras saídas geradas pelo R no documento Rmd. -->\n\n<!-- 7. **Melhores Práticas:** -->\n<!--    - Aprender sobre melhores práticas para escrever documentos Rmd claros, bem-organizados e reprodutíveis. -->\n<!--    - Conhecer técnicas para comentar e documentar o código dentro dos chunks. -->\n\n## HTML\n\nO arquivo HTML é a saída mais comum quanto ao tipo de produto gerado em arquivos Rmd e, portanto, possui o maior número de funcionalidades disponíveis em comparação com os outros tipos de produtos possíveis (PDF e DOCX).\nHá diversas maneiras de produzir HTML distintos, a depender do pacote R utilizado e a finalidade do HTML.\nComeçaremos pela maneira mais simples, utilizando a função `rmarkdown::html_document()` do pacote R __rmarkdown__ [@R-rmarkdown]:\n\n```yaml\n---\ntitle: \"Análise exploratória de dados\"\nauthor: Ricardinho\ndate: 4 Jun 2024\noutput: html_document\n---\n```\n\n### Acrescentar sumário {#sec-sumario}\n\nPara acrescentar um sumário (ou tabela de conteúdo) em seu documento, use o argumento `toc` e especifique a profundidade do sumário por meio do argumento `toc_depth`:\n\n```yaml\n---\ntitle: \"Análise exploratória de dados\"\nauthor: Ricardinho\ndate: 4 Jun 2024\noutput: \n  html_document:\n    toc: true\n    toc_depth: 3\n---\n```\n\nReparem que em metadados YAML, os espaços contam; isto é, a [indentação](https://w2websites.com/glossario/o-que-e-indentacao/) é __necessária__!\n\nA profundidade do sumário diz respeito ao grau do cabeçalho que se deseja atingir, isto é, você deseja que seu sumário liste os cabeçalhos até o segundo grau (== \"##\")? Ou até o terceiro grau (==\"###\")? Ou até o quarto grau (=\"####\") ?  \n\nPara cada uma das respostas acima, teríamos o argumento `toc_depth` com as seguintes respostas:\n\n```yaml\ntoc_depth: 2\ntoc_depth: 3\ntoc_depth: 4\n```\n\nSe não desejarmos o sumário, podemos usar o argumento `toc: false` ou simplesmente não utilizá-lo.  \n\n### Numerar seções {#sec-num_secoes}\n\nVocê pode numerar seções utilizando o argumento `number_sections`, que habilita a numeração caso seja atribuído o valor `true` a ele:\n\n```yaml\n---\ntitle: \"Análise exploratória de dados\"\nauthor: Ricardinho\ndate: 4 Jun 2024\noutput: \n  html_document:\n    number_sections: true\n---\n```\n\nSe você desejar numerar todas as seções, excluindo alguma(s), você pode fazer acrescentar o valor `{-}` após o cabeçalho que você deseja não numerar.\nPor exemplo, suponha que a seção `# Prefácio` não deva ser numerada por você.\nVocê deve fazer então da seguinte maneira:\n\n```md\n# Prefácio {-}\n```\n\n### Referência cruzada de figuras e tabelas {#sec-refcruz}\n\nFazer referência de figuras e tabelas no texto é um recurso muito útil em qualquer tipo de documento.\nPorém, este recurso só está disponível no pacote R __bookdown__ [@R-bookdown].\nLogo, será necessário mudar o valor atribuído ao argumento `output` nos metadados do seu arquivo.\nEm vez de `output: html_document`, usaremos `output: bookdown::html_document2`.\nVeja abaixo:\n\n```yaml\n---\ntitle: \"Análise exploratória de dados\"\nauthor: Ricardinho\ndate: 4 Jun 2024\noutput: bookdown::html_document2\n---\n```\n\nEm seguida, devemos nos preocupar com a referência em si.\nPara isso, precisaremos dos itens abaixo:\n\n+ Figuras ou tabelas deverão possuir uma legenda;\n+ Pedaços de código nomeados, pois esse nome será o código utilizado como identificador da referência.  \n\nA referência cruzada é feita por meio da seguinte notação:\n\n> `\\@ref(tipo:codigo)`\n\nem que `tipo` se refere à figura `fig` ou tabela `tab`, e `codigo` se refere ao codigo identificador do pedaço de código em que faremos a inserção da figura ou tabela.  \n\nPara ficar mais claro, vejam o exemplo abaixo:\n\n````md\n---\ntitle: \"Análise exploratória de dados\"\nsubtitle: \"Aqui vai o subtítulo\"\nauthor: Ricardinho\ndate: 4 Jun 2024\n# documentclass: book\noutput: \n  bookdown::pdf_document2:\n    toc: true\n    # includes:\n    #   in_header: \"header.tex\"\n    #   before_body: \"before-body.tex\"\n  # bookdown::word_document2:\n  #   reference_docx: modelo.docx\n  #   theme: cerulean\n  #   fig_width: 12\n  #   fig_height: 10\n# lof: yes\n# lot: yes\nbibliography: minhaprimeiraref.bib\ncsl: associacao-brasileira-de-normas-tecnicas.csl\n---\n\n```{r, echo=FALSE, eval=TRUE, message=FALSE}\nlibrary(\"knitr\")\nvariavel1 <- 5+2\nvariavel2 <- variavel1 +2\n\nlibrary(\"dplyr\")\n\nexemplinho <- read.table(\"exemplinho.csv\", sep = \",\", header = TRUE)\n```\n\n\\newpage\n\n```{r, echo=FALSE, eval=FALSE}\n1+1+1+1+1+2\n```\n\n\n```{r}\n#| echo: true\n#| eval: false\n#| include: false\n#| message: false\n#| warning: false\n5+2\n```\n\n# Introdução\n\n## Subintrodução\n\nAqui está a variável 1: `r variavel1`.  \n\n\nAqui eu tenho um texto introdutório sobre minha análise exploratória de dados (AED) referentes a carros.  \n\nVejam a figura \\@ref(fig:fig1).  \n\n```{r fig1, fig.cap = \"Aqui vai a legenda das figuras.\", out.width=\"120%\"}\nplot(mtcars)\n```\n\nOlha a fotinha \\@ref(fig:fotinha).  \n\n```{r fotinha, fig.cap= \"Fotinha\", out.width=\"50%\"}\n#| echo: false\nknitr::include_graphics(\"fotinha.JPG\")\n```\n\n```{r}\nmagick::image_read(\"../fotinha.JPG\") |> \n  magick::image_scale(\"x700\")\n```\n\n\nA tabela \\@ref(tab:minha-tabela) expõe as primeiras 6 linhas do conjunto de dados 'mtcars'.  \n\n```{r minha-tabela}\nknitr::kable(head(mtcars), caption = \"Aqui vai a legenda de tabelas, isto é, dentro do argumento 'caption' da função knitr::kable\")\n```\n\n\n\n# Material e métodos\n\nAqui eu discorro sobre os métodos utilizados para responder minhas perguntas.  \n\nUma lista de refs [@Xieetal2020;@Yaoetal2024].  \n\n\n## Localidades\n\n## Análise de dados\n\n```{r, echo=FALSE, warning=FALSE}\nlibrary(\"palmerpenguins\")\nlibrary(\"ggplot2\")\nggplot(penguins) +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  theme_bw()\n\n```\n\n# Resultados\n\n## Genética\n\n### ddradSEQ\n\n## Morfologia\n\nReunimos um conjunto de `r nrow(mtcars)` observações e `r ncol(mtcars)` variáveis.  \n\n```{r}\nmtcars2 <- dplyr::bind_rows(mtcars, mtcars)\n```\n\nNa série temporal do ano de 2019, houve `r nrow(mtcars2)` observações e `r ncol(mtcars2)` variáveis para estimar o traço funcional do solo papapa.  \n\nA tabela \\@ref(tab:tab2) evidencia as seis primeiras linhas de nosso conjunto de dados.  \n\n```{r tab2}\n#| echo: false\ndados = read.table(\"exemplinho.csv\", header = TRUE, sep = \",\")\nknitr::kable(dados, caption = \"Seis primeiras linhas do conjunto de dados iris.\")\n```\n\nColetamos `r length(unique(dados$Species))` espécies diferentes.  \n\nAs espécies coletadas foram `r glue::glue_collapse(x = sort(unique(dados$Species)), sep = \", \", last = \" e \")`.  \n\n`r 1+1`\n\n| Nome    | Altura |\n|---------|--------|\n| Lysne   | `r 1+1`|\n| Luciana | `r 1+2`|\n| Rhaylla | 1,68   |\n| José    | 1,82   |\n| Sylvio  | 1,73   |\n| Carlos  | 1,75   |\n| Ricardo | 1,79   |\n\n: https://www.tablesgenerator.com/\n\n\n# Referências\n\n````\n\nPara mais possibilidades, veja a seção [Update the date automatically](https://bookdown.org/yihui/rmarkdown-cookbook/update-date.html) do livro [Rmarkdown cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/) [@rmarkdown2020].  \n\n### Aparência {#sec-aparencia}\n\nPor meio do argumento `theme` dentro do YAML, podemos controlar a aparência de seu arquivo HTML.\nPossíveis valores incluem:\n\n\n> default, bootstrap, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, yeti\n\nTeste cada uma dessas possibilidades e veja como fica a aparência de seu produto.\nPara testar, escreva dessa maneira no seu YAML, substituindo após `theme: ` por cada uma das possibilidades acima:\n\n```yaml\n---\ntitle: \"Análise exploratória de dados\"\nauthor: Guguinha\noutput: \n  html_document:\n    theme: journal\n---\n```\n\nPodemos mudar também a aparência dos pedaços de códigos em nossos produtos.\nSuponha que eu possua o código abaixo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\nComo ele vai aparecer no produto final?  \n\nNós controlamos essa variável por meio do argumento `highlight`.\nAs opções disponíevis incluem:\n\n> default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, textmate\n\nTeste as opções acima em seu YAML escrevendo como abaixo:\n\n```yaml\n---\ntitle: \"Análise exploratória de dados\"\nauthor: Guguinha\noutput: \n  html_document:\n    highlight: espresso\n---\n```\n\n### Controle de pedaços de código {#pedacos-codigos}\n\nOs códigos escritos nas diversas linguagens possíveis de serem utilizadas em arquivos Rmd podem ser controlados quanto à exibição no produto final e também quanto aos efeitos dos códigos.\nExemplificarei alguns dos argumentos mais utilizados:\n\n+ `echo`\n\n+  `eval`\n\n+ `include`\n\n+ `message`\n\n+ `warning`\n\n\n````md\n# echo\n```{{r echo = FALSE}}\nlibrary(\"MASS\")\n```\n````\n\n````md\n# eval\n```{{r eval = FALSE}}\nplot(long, lat, data = coordenadas)\n```\n````\n\n````md\n# include\n```{{r include = FALSE}}\nlibrary(\"dplyr\")\nlibrary(\"purrr\")\nlibrary(\"vegan\")\n```\n````\n\n````md\n# message\n```{{r message = FALSE}}\nlibrary(\"dplyr\")\nlibrary(\"purrr\")\nlibrary(\"vegan\")\n```\n````\n\n````md\n# warning\n```{{r warning = FALSE}}\nlibrary(\"palmerpenguins\")\nlibrary(\"ggplot2\")\n\nggplot(penguins) +\n  geom_point(aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n  theme_bw()\n```\n````\n\n\n\n### Controle de figuras {#sec-controlefigs}\n\nPodemos controlar como as figuras aparecerão em nossos produtos por meio dos argumentos YAML a seguir:\n\n+ `fig_width` e `fig_height` controlam, respectivamente, a largura e altura da imagem;\n\n+ `fig_caption` controla se as figuras devem ser compiladas com ou sem legendas (valores possíveis `true` ou `false`)\n\n+ `dev` controla qual dispositivo deve compilar as figuras, isto é, se `pdf`, `png`, ou outros (padrão é o `png`).  \n\nVejam possibilidades abaixo e testem em seus arquivos:\n\n```yaml\n---\ntitle: \"Análise exploratória de dados\"\nauthor: Guerreira Luaninha\ndate: 4 Jun 2024\noutput: \n  html_document:\n    fig_width: 7\n    fig_height: 6\n    fig_caption: true\n---\n```\n\nOutra maneira de controlar a aparência das figuras é por meio de argumentos dentro dos pedaços de código.\nOs argumentos disponíveis são escritos de maneira parecida com os argumentos utilizados no YAML, porém diferem quanto à inserção de um ponto (`.`) no lugar do subtraço (`_`).\nAs opções mais populares são:\n\n+ `fig.height` e `fig.width`, que determinam a altura e a largura da figura em polegadas, respectivamente. Os valores devem ser numéricos. Exemplo: `fig.width = 8`, `fig.height = 4`.\n\n+ `fig.dim` que combina a largura e a altura da figura, respectivamente, na mesma função, também expressa em polegadas. Exemplo: `fig.dim = c(8, 4)` é o mesmo que ``fig.width = 8, fig.height = 4`.\n\n+ `fig.cap`, que determina a legenda da figura. Deve apresentar sempre o texto que se deseja colocar entre aspas. Exemplo: `fig.cap = \"Essa é a legenda de minha figura.\"`.\n\n+ `out.width` e `out.height`, que expressa o tamanho da imagem no produto final, cujos valores são expressos em porcentagens, \"50%\", \"70%\" etc. Exemplo: `out.width = \"50%\"`, `out.height = \"80%\"`.  \n\nExemplos de aplicação desses argumentos são expressos abaixo:\n\n````md\n# Usando fig.width e fig.height\n```{{r, fig.width = 12, fig.height = 10, fig.cap=\"Olha a legenda da figura\"}}\nknitr::include_graphics(\"fotinha.jpg\")\n```\n````\n\n````md\n# out.width e out.height\n```{{r, out.width=\"50%\", out.height = \"50%\"}}\nknitr::include_graphics(\"fotinha.jpg\")\n```\n````\n\n````md\n# fig.dim\n```{{r, fig.dim = c(12,10)}}\nknitr::include_graphics(\"fotinha.jpg\")\n```\n````\n\nMais opções estão explicadas detalhadamente na seção [Plots](https://yihui.org/knitr/options/#plots) da página dedicada ao pacote __knitr__ [@knitr2014].  \n\n\n## PDF\n\nO formato PDF possui opções não disponíveis para outros formatos, já que é o LaTeX que controla o produto final.\nDo que já vimos até então, as opções @sec-sumario, @sec-num_secoes, @sec-refcruz e @sec-controlefigs também são válidas no PDF.  \n\n\n<!-- ## DOCX -->\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}